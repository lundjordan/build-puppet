#!/bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# This script list backup home directories of disabled users with UID > 500
# and delete them after a period of time.
# i.e. it checks for users that are not listed in LDAP auth (=disabled) but have
# a home directory, tar it up, and remove original. After the defined period of
# time has elapsed, the script delete the tarball (at this point all data for that
# home dir is permanently lost, which is the intended behavior)

# vars from puppet
homebase="<%= @homebase %>"
operatingsystem="<%= scope.lookupvar('::operatingsystem') %>"
fqdn="<%= scope.lookupvar('::fqdn') %>"

# settings
NOOP=false
VERBOSE=false
BASE="${homebase}/archive/"
PUPPETENV='/etc/puppet/environments'
DELETEAFTER=90 # in days
EXCEPTIONS="lost+found archive Shared .localized" #users that we never backup or delete even if disabled

set -e

function setup() 
{
    mkdir -p ${BASE}
    chmod 0700 ${BASE}
    # OS X doesn't update mtime on a chmod
    touch ${BASE}
}

function exist()
{
    oldifs=$IFS
    unset IFS
    [[ -z "$1" ]] && return 1
    for i in ${EXCEPTIONS}; do
        [[ $i == $1 ]] && {
            IFS=$oldifs
            return 1
        }
    done
    IFS=$oldifs
    return 0
}

#Backup any user that has been disabled
function backup()
{
    # fill in $homelist with a list of in-use homedirs
    homelist=$(mktemp -t homeclean-XXXXXX)
    case $operatingsystem in
        Darwin) dscacheutil -q user | grep '^dir:' | cut -c 6- | sort -u > $homelist ;;
        *) getent passwd|cut -d ':' -f 6 > $homelist ;;
    esac

    # iterate over the existing homedirs
    IFS="
"
    for user in $(ls $homebase); do
        exist ${user} || continue
        grep -q ${user} ${homelist} || {
        if [ -d ${PUPPETENV}/${user} ]; then
            if [ -d ${homebase}/${user} ]; then
                $VERBOSE && echo "INFO: moving puppet environment ${PUPPETENV}/${user} to user's home directory ${homebase}/${user}/puppet-environment"
                [[ $NOOP -eq 0 ]] && mv -f ${PUPPETENV}/${user} ${homebase}/${user}/puppet-environment-${user}
            else
                $VERBOSE && echo "INFO: no home directory for ${user}, deleting puppet environment ${PUPPETENV}/${user}"
                [[ $NOOP -eq 0 ]] && rm -rf ${PUPPETENV}/${user}
            fi
        fi

        $VERBOSE && echo "INFO: will backup disabled user $user"
        [[ $NOOP -eq 0 ]] && tar Pczf ${BASE}${user}.tar.gz ${homebase}/${user} && rm -rf ${homebase}/${user}
                }
    done
    unset IFS
    rm $homelist
}

#Delete any backup older than DELETEAFTER days (as rounded per 24h periods by find)
function delete()
{
    $VERBOSE && echo "INFO: will delete disabled user backups older than $DELETEAFTER days:"
    find ${BASE} -mtime +${DELETEAFTER} -print 
    [[ $NOOP -eq 0 ]] && find ${BASE} -mindepth 1 -mtime +${DELETEAFTER} -delete
}

# main()
$NOOP && echo "NOOP mode enabled: no action will be taken"
$NOOP || setup
backup
delete
