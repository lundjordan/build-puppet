# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# number of tries to make between attempts to run puppet.  6 waits about 2h
PUPPETMASTERS=$(< <%= @puppetmasters_txt %>)
LAST_GOOD_RUN_FILE=/var/lib/puppet/last-good-run
GIVE_UP_AFTER_TRYING=3
MAX_SECS_SINCE_GOOD_RUN=$((4*3600))

# note that --test implies --detailed-exitcodes, which we don't want
PUPPET_OPTIONS="--onetime --no-daemonize --logdest=console --logdest=syslog --color=false"

REBOOT_FLAG_FILE="/REBOOT_AFTER_PUPPET"

run_puppet() {
    puppet_server="$1"
    echo $"Running puppet agent against server '$puppet_server'"

    # check for 'err:' in the output; this catches errors even
    # when the puppet exit status is incorrect.
    tmp=`mktemp /tmp/puppet-outputXXXXXX`
    . /usr/local/bin/proxy_reset_env.sh
    /usr/bin/puppet agent --detailed-exitcodes $PUPPET_OPTIONS --server ${puppet_server} > $tmp 2>1
    retval=$?
    # just in case, if there were any errors logged, flag it as an error run
    if grep -q "^Error:" $tmp
    then
        retval=1
    fi

    rm $tmp
    case $retval in
        0|2) return 0;;
        *) return 1;;
    esac
}

run_until_success() {
    rm -f "$REBOOT_FLAG_FILE"

    count=0
    wait_time=60
    success=false
    while ! $success
    do
        for puppetmaster in $PUPPETMASTERS; do
            # try running puppet, and sleep 60s if it fails
            if run_puppet $puppetmaster; then
                touch "${LAST_GOOD_RUN_FILE}"
                success=true
                break
            fi
            sleep $wait_time
            wait_time=$((wait_time*2))
        done

        count=$((count+1))
        if [ $count -ge $GIVE_UP_AFTER_TRYING ]; then
            # after GIVE_UP_AFTER_TRYING iterations, we'll either just call it
            # success if we've had a successful run reasonably recently, or
            # reboot in hopes there's some network issue preventing puppet from
            # running; note that this perl invocation returns a large number
            # when the file doesn't exist, giving the expected outcome.
            local since_last_good_run=$(perl -e '@st = stat("'${LAST_GOOD_RUN_FILE}'"); print time - $st[9]')
            if [ $since_last_good_run -gt ${MAX_SECS_SINCE_GOOD_RUN} ]; then
                echo "Giving up and rebooting"
                echo "IP: $(facter ipaddress)" | mail -s "Repeated Puppet Failures on $(facter fqdn)" "<%= scope.lookupvar('::config::puppet_notif_email') %>"
                do_reboot
            else
                echo "Giving up and proceeding"
                success=true
            fi
        fi
    done

    if [ -f "$REBOOT_FLAG_FILE" ]; then
        rm -f "$REBOOT_FLAG_FILE"
        echo "Rebooting as requested"
        do_reboot
    fi
}

do_reboot() {
    if [ -x /sbin/reboot ]; then
        /sbin/reboot
    else
        /usr/bin/reboot
    fi
    sleep 120
}
