#!/usr/bin/env python
# vim: ft=python

import argparse
import boto
import logging
import grp
import os
import pwd
import re
import requests
import socket
import tarfile

SUPPORTED_HOSTNAME_PREFIXES = ["bld-linux64", "try-linux64"]
JACUZZI_ALLOCATOR_URL = "http://jacuzzi-allocator.pub.build.mozilla.org/v1"

DIRS = {
    "/builds/git-shared/repo": {
        "regex": "^b2g",
        "deploy_to_unallocated_slaves": True,
        "deploy_to_try_slaves": True,
        "buckets": {
            "us-east-1": "mozilla-releng-tarballs-use1",
            "us-west-1": "mozilla-releng-tarballs-usw1",
            "us-west-2": "mozilla-releng-tarballs-usw2",
        },
        "key": "git-shared-repo.tar"
    },
    "/builds/hg-shared/integration/mozilla-inbound/.hg": {
        "regex": "mozilla-inbound",
        "deploy_to_unallocated_slaves": True,
        "deploy_to_try_slaves": False,
        "buckets": {
            "us-east-1": "mozilla-releng-tarballs-use1",
            "us-west-1": "mozilla-releng-tarballs-usw1",
            "us-west-2": "mozilla-releng-tarballs-usw2",
        },
        "key": "mozilla-inbound.tar"
    },
    "/builds/hg-shared/mozilla-central/.hg": {
        "regex": "mozilla-central",
        "deploy_to_unallocated_slaves": False,
        "deploy_to_try_slaves": False,
        "buckets": {
            "us-east-1": "mozilla-releng-tarballs-use1",
            "us-west-1": "mozilla-releng-tarballs-usw1",
            "us-west-2": "mozilla-releng-tarballs-usw2",
        },
        "key": "mozilla-central.tar"
    },
    "/builds/hg-shared/integration/b2g-inbound/.hg": {
        "regex": "b2g-inbound",
        "deploy_to_unallocated_slaves": False,
        "deploy_to_try_slaves": False,
        "buckets": {
            "us-east-1": "mozilla-releng-tarballs-use1",
            "us-west-1": "mozilla-releng-tarballs-usw1",
            "us-west-2": "mozilla-releng-tarballs-usw2",
        },
        "key": "b2g-inbound.tar"
    },
    "/builds/hg-shared/try/.hg": {
        "deploy_to_unallocated_slaves": False,
        "deploy_to_try_slaves": True,
        "buckets": {
            "us-east-1": "mozilla-releng-tarballs-use1",
            "us-west-1": "mozilla-releng-tarballs-usw1",
            "us-west-2": "mozilla-releng-tarballs-usw2",
        },
        "key": "try.tar"
    },
}

log = logging.getLogger(__name__)


def is_suported_slave(hostname):
    return any(hostname.startswith(prefix) for prefix in
               SUPPORTED_HOSTNAME_PREFIXES)


def is_try_slave(hostname):
    return hostname.startswith("try-")


def get_availability_zone():
    url = "http://169.254.169.254/latest/meta-data/placement/availability-zone"
    log.info("Fetching region data")
    az = requests.get(url, timeout=3).content
    return az


def get_allocated_builders(hostname):
    url = "{h}/machines/{n}".format(h=JACUZZI_ALLOCATOR_URL, n=hostname)
    builders = None
    try:
        r = requests.get(url, timeout=30).json()
        builders = r.get("builders")
    except:
        pass
    return builders


def get_prepopulated_dirs(builders=None, is_try=False):
    dirs = {}
    for target_dir, info in DIRS.iteritems():
        if builders is None:
            if (info["deploy_to_unallocated_slaves"] and not is_try) or \
                    (info["deploy_to_try_slaves"] and is_try):
                log.info("To deploy: %s", target_dir)
                dirs[target_dir] = info
        else:
            if not info.get("regex"):
                log.info("Ignoring %s without 'regex' set", target_dir)
                continue
            regex = re.compile(info["regex"])
            if any(regex.search(b) for b in builders):
                log.info("To deploy: %s", target_dir)
                dirs[target_dir] = info

    az = get_availability_zone()
    for target_dir, info in dirs.iteritems():
        bucket_map = info["buckets"]
        for region, bucket in bucket_map.iteritems():
            if az.startswith(region):
                # change in-place
                info["bucket"] = bucket
    return dirs


def deploy(dirs):
    for target_dir, info in dirs.iteritems():
        if os.path.exists(target_dir):
            log.info("%s already exists, skipping.", target_dir)
            continue
        unpack_tarball(info["bucket"], info["key"], target_dir)


def unpack_tarball(bucket, key, target_dir):
    log.info("Creatging %s", target_dir)
    os.makedirs(target_dir, 0775)
    log.info("Fetching s3://%s/%s to %s...", bucket, key, target_dir)
    conn = boto.connect_s3()
    bucket = conn.get_bucket(bucket)
    key = bucket.get_key(key)
    tar = tarfile.open(mode="r|*", fileobj=key)
    log.info("Extracting...")
    tar.extractall(path=target_dir)
    log.info("Extracted")


def run_as(user, group):
    current_id = os.getuid()
    current_gid = os.getgid()
    target_uid = pwd.getpwnam(user).pw_uid
    target_gid = grp.getgrnam(group).gr_gid
    # Set GID before dropping to UID
    if target_gid != current_gid:
        log.info("Switching group to %s", group)
        os.setgid(target_gid)

    if target_uid != current_id:
        log.info("Switching user to %s", user)
        os.setuid(target_uid)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-u", "--user",
        default="<%= scope.lookupvar('::config::builder_username') %>",
        help="Run the script under user ID")
    parser.add_argument("-g", "--group", default="mock_mozilla",
                        help="Run the script under group ID")
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

    # Drop privileges
    run_as(args.user, args.group)

    hostname = socket.gethostname().split(".")[0]
    log.info("Working on %s", hostname)

    if not is_suported_slave(hostname):
        log.warn("%s is not supported", hostname)
        exit(0)

    if is_try_slave(hostname):
        log.info("Try slave detected")
        dirs = get_prepopulated_dirs(is_try=True)
        deploy(dirs)
    else:
        builders = get_allocated_builders(hostname)
        if builders:
            log.info("Jacuzzied slave detected")
            dirs = get_prepopulated_dirs(builders=builders, is_try=False)
            deploy(dirs)
        else:
            log.info("Non allocated slave detected")
            dirs = get_prepopulated_dirs(builders=None, is_try=False)
            deploy(dirs)

if __name__ == "__main__":
    try:
        main()
    except Exception:
        log.exception("Failed to fetch tarballs, gracefully exiting...")
        exit(0)
